FIRST NEED TO APPLY THIS TO SQL, SHOULD THEN BE AVAILABLE IN FUTURE

CREATE OR REPLACE FUNCTION _final_mode(anyarray)
  RETURNS anyelement AS
$BODY$
    SELECT a
    FROM unnest($1) a
    GROUP BY 1 
    ORDER BY COUNT(1) DESC, 1
    LIMIT 1;
$BODY$
LANGUAGE 'sql' IMMUTABLE;
 
-- Tell Postgres how to use our aggregate
CREATE AGGREGATE mode(anyelement) (
  SFUNC=array_append, --Function to call for each row. Just builds the array
  STYPE=anyarray,
  FINALFUNC=_final_mode, --Function to call after everything has been added to array
  INITCOND='{}' --Initialize an empty array when starting
);


EXAMPLE CSS

CSS


/** torque visualization */

Map {
-torque-frame-count:512;
-torque-animation-duration:30;
-torque-time-attribute:"time";
-torque-aggregation-function:"mode(magnitude)";
-torque-resolution:2;
-torque-data-aggregation:cumulative;
}

#table_2012_quakes{
  comp-op: lighter;
  marker-fill-opacity: 0.9;
  marker-line-color: #ffffff;
  marker-line-width: 0;
  marker-line-opacity: 1;
  marker-type: ellipse;
  marker-width: 3.5;
  marker-fill: #ffffff;
  [value >= 6.5] {marker-width:7}
}

#table_2012_quakes[frame-offset=1] {
 marker-width:5.5;
 marker-fill-opacity:0.45;
}
#table_2012_quakes[frame-offset=2] {
 marker-width:7.5;
 marker-fill-opacity:0.225;
}
#table_2012_quakes[frame-offset=1] [value >= 6.5] {
 marker-width:11;
 marker-fill-opacity:0.45;
}
#table_2012_quakes[frame-offset=2] [value >= 6.5] {
 marker-width:13;
 marker-fill-opacity:0.225;
}
